version: '3.8'
services:
  # This is the configuration for our PostgreSQL database container
  # Note the `postgres` name is important, in out Node app when we refer
  # to  `host: "postgres"` that value is mapped on the network to the 
  # address of this container.
  postgres:
    image: postgres:14.1-alpine
    restart: always
    environment:
      # You can set the value of environment variables
      # in your docker-compose.yml file
      # Our Node app will use these to connect
      # to the database
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=member_db
    ports:
      # Standard port for PostgreSQL databases
      - "5432:5432"
    volumes:
      # When the PostgresSQL container is started it will run any scripts
      # provided in the `docker-entrypoint-initdb.d` directory, this connects
      # our seed file to that directory so that it gets run
      - ./database-seed.sql:/docker-entrypoint-initdb.d/database-seed.sql

  # PostgreSQL pgAdmin panel accessible at http://localhost:16543/
  pgadmin-compose:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "placeholder@example.com"
      PGADMIN_DEFAULT_PASSWORD: "fakepassword123!"
    ports:
      - "16543:80"
    depends_on:
      - postgres

  member_api:
    build: api-services
    container_name: member_api
    ports:
      - 8000:8000
    depends_on:
      - postgres
    environment:
      WAIT_HOSTS: postgres:5432
    volumes:
      - ./api-services/.env.docker:/usr/src/app/.env

  member_web:
    build: award-web
    container_name: member_web
    ports:
      - 3000:3000
    depends_on:
      - member_api
    environment:
      WAIT_HOSTS: member_api:8000
    volumes:
      - ./award-web/.env.docker:/usr/src/app/.env
